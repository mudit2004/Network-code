import java.io.*;
import java.net.*;
import java.util.*;

public class chat_server{
    private List<ObjectOutputStream> clientOutputStreams;

    public chat_server() {
        clientOutputStreams = new ArrayList<>();
        startRunning();
    }

    public void startRunning() {
        try {
            ServerSocket serverSocket = new ServerSocket(8888);

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("Client connected: " + clientSocket);

                ObjectOutputStream outputStream = new ObjectOutputStream(clientSocket.getOutputStream());
                clientOutputStreams.add(outputStream);

                Thread clientHandler = new Thread(new ClientHandler(clientSocket, outputStream));
                clientHandler.start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void broadcastMessage(String message) {
        for (ObjectOutputStream outputStream : clientOutputStreams) {
            try {
                outputStream.writeObject(message);
                outputStream.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private class ClientHandler implements Runnable {
        private Socket clientSocket;
        private ObjectOutputStream outputStream;

        public ClientHandler(Socket socket, ObjectOutputStream outputStream) {
            this.clientSocket = socket;
            this.outputStream = outputStream;
        }

        @Override
        public void run() {
            try {
                ObjectInputStream inputStream = new ObjectInputStream(clientSocket.getInputStream());

                while (true) {
                    String message = (String) inputStream.readObject();
                    System.out.println("Received: " + message);
                    broadcastMessage(message);
                }
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            } finally {
                try {
                    clientSocket.close();
                    clientOutputStreams.remove(outputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) {
        new chat_server();
    }
}
